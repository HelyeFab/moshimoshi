#!/usr/bin/env node

/**
 * Import Optimization Script
 * Converts static imports to dynamic imports for better code splitting
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Heavy libraries that should be dynamically imported
const HEAVY_LIBS = [
  'firebase/app',
  'firebase/auth',
  'firebase/firestore',
  'firebase/storage',
  '@mui/material',
  '@mui/icons-material',
  'chart.js',
  'react-chartjs-2',
  'moment',
  'date-fns',
  'lodash',
];

// Components that should be lazy loaded
const LAZY_LOAD_PATTERNS = [
  /^.*Modal$/,
  /^.*Dialog$/,
  /^.*Chart$/,
  /^.*Table$/,
  /^.*Form$/,
  /^Admin.*/,
  /^.*Stats$/,
];

class ImportOptimizer {
  constructor() {
    this.changedFiles = [];
    this.suggestions = [];
  }

  /**
   * Analyze imports in a file
   */
  analyzeFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf-8');
    const fileName = path.basename(filePath);
    
    // Skip if already optimized
    if (content.includes('// @optimized-imports')) {
      return;
    }

    const issues = [];
    const suggestions = [];

    // Check for heavy library imports
    HEAVY_LIBS.forEach(lib => {
      const importRegex = new RegExp(`import .* from ['"]${lib}['"]`, 'g');
      if (importRegex.test(content)) {
        issues.push({
          type: 'heavy_import',
          library: lib,
          line: content.split('\n').findIndex(line => line.includes(lib)) + 1,
        });

        suggestions.push({
          file: filePath,
          issue: `Heavy library '${lib}' imported statically`,
          suggestion: `Use dynamic import: const ${lib.split('/').pop()} = await import('${lib}')`,
        });
      }
    });

    // Check for components that should be lazy loaded
    const componentImports = content.match(/import\s+(\w+)\s+from\s+['"]\..*components.*['"]/g) || [];
    
    componentImports.forEach(imp => {
      const componentName = imp.match(/import\s+(\w+)/)?.[1];
      if (componentName && LAZY_LOAD_PATTERNS.some(pattern => pattern.test(componentName))) {
        suggestions.push({
          file: filePath,
          issue: `Component '${componentName}' could be lazy loaded`,
          suggestion: `Use: const ${componentName} = lazy(() => import('./components/${componentName}'))`,
        });
      }
    });

    // Check for barrel imports
    if (content.includes("from './index'") || content.includes('from "../index"')) {
      suggestions.push({
        file: filePath,
        issue: 'Barrel imports detected',
        suggestion: 'Import directly from specific files to improve tree shaking',
      });
    }

    // Check for unused imports
    const imports = content.match(/import\s+{([^}]+)}\s+from/g) || [];
    imports.forEach(imp => {
      const items = imp.match(/{([^}]+)}/)?.[1].split(',').map(s => s.trim()) || [];
      items.forEach(item => {
        const itemName = item.split(' as ')[0].trim();
        // Simple check - could be improved
        const usageRegex = new RegExp(`\\b${itemName}\\b`, 'g');
        const matches = content.match(usageRegex) || [];
        if (matches.length <= 1) { // Only found in import statement
          suggestions.push({
            file: filePath,
            issue: `Possibly unused import: ${itemName}`,
            suggestion: `Remove unused import to reduce bundle size`,
          });
        }
      });
    });

    if (suggestions.length > 0) {
      this.suggestions.push(...suggestions);
    }

    return { issues, suggestions };
  }

  /**
   * Generate optimized imports file
   */
  generateOptimizedImports() {
    const template = `/**
 * Optimized Dynamic Imports
 * Auto-generated by optimize-imports.js
 * 
 * Use these helpers for lazy loading heavy components and libraries
 */

import dynamic from 'next/dynamic';
import { lazy, Suspense } from 'react';

// Loading component
const LoadingComponent = () => (
  <div className="flex items-center justify-center p-4">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
  </div>
);

// Dynamic imports for heavy libraries
export const DynamicImports = {
  // Firebase
  firebase: () => import('firebase/app'),
  firebaseAuth: () => import('firebase/auth'),
  firebaseFirestore: () => import('firebase/firestore'),
  firebaseStorage: () => import('firebase/storage'),
  
  // UI Libraries
  muiCore: () => import('@mui/material'),
  muiIcons: () => import('@mui/icons-material'),
  
  // Charts
  chartjs: () => import('chart.js'),
  reactChartjs: () => import('react-chartjs-2'),
  
  // Date utilities
  moment: () => import('moment'),
  dateFns: () => import('date-fns'),
  
  // Utilities
  lodash: () => import('lodash'),
};

// Lazy loaded components with loading states
export const LazyComponents = {
  // Admin components
  AdminDashboard: dynamic(() => import('@/components/admin/Dashboard'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  AdminStats: dynamic(() => import('@/components/admin/Stats'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  // Modals and Dialogs
  SettingsModal: dynamic(() => import('@/components/modals/SettingsModal'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  // Charts and visualizations
  ProgressChart: dynamic(() => import('@/components/charts/ProgressChart'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  // Heavy forms
  LessonForm: dynamic(() => import('@/components/forms/LessonForm'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
};

// Helper to preload components
export const preloadComponent = (componentName: keyof typeof LazyComponents) => {
  const component = LazyComponents[componentName];
  if (component && typeof component.preload === 'function') {
    component.preload();
  }
};

// Helper to load library on demand
export const loadLibrary = async (libraryName: keyof typeof DynamicImports) => {
  const loader = DynamicImports[libraryName];
  if (loader) {
    return await loader();
  }
  throw new Error(\`Library \${libraryName} not found in dynamic imports\`);
};

// React lazy with error boundary
export const lazyWithErrorBoundary = (
  importFunc: () => Promise<any>,
  fallback?: React.ComponentType
) => {
  const LazyComponent = lazy(importFunc);
  
  return (props: any) => (
    <Suspense fallback={<LoadingComponent />}>
      <LazyComponent {...props} />
    </Suspense>
  );
};

// Intersection Observer for lazy loading
export const useLazyLoad = (ref: React.RefObject<HTMLElement>, callback: () => void) => {
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          callback();
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => observer.disconnect();
  }, [ref, callback]);
};
`;

    fs.writeFileSync(
      path.join(process.cwd(), 'src/lib/performance/dynamic-imports.tsx'),
      template
    );

    console.log('‚úÖ Generated dynamic imports helper at src/lib/performance/dynamic-imports.tsx');
  }

  /**
   * Analyze all TypeScript/React files
   */
  analyzeProject() {
    console.log('üîç Analyzing imports in the project...\n');

    const files = glob.sync('src/**/*.{ts,tsx}', {
      ignore: ['**/node_modules/**', '**/*.test.*', '**/*.spec.*'],
    });

    console.log(`Found ${files.length} files to analyze\n`);

    files.forEach(file => {
      this.analyzeFile(file);
    });

    // Generate report
    this.generateReport();
    
    // Generate optimized imports file
    this.generateOptimizedImports();
  }

  /**
   * Generate optimization report
   */
  generateReport() {
    if (this.suggestions.length === 0) {
      console.log('‚úÖ No import optimization suggestions found!');
      return;
    }

    console.log('=' . repeat(60));
    console.log('üìä IMPORT OPTIMIZATION REPORT');
    console.log('=' . repeat(60));
    console.log(`\nFound ${this.suggestions.length} optimization opportunities:\n`);

    // Group by file
    const byFile = {};
    this.suggestions.forEach(s => {
      if (!byFile[s.file]) {
        byFile[s.file] = [];
      }
      byFile[s.file].push(s);
    });

    Object.entries(byFile).forEach(([file, suggestions]) => {
      console.log(`\nüìÅ ${file.replace(process.cwd() + '/', '')}`);
      suggestions.forEach(s => {
        console.log(`  ‚ö†Ô∏è  ${s.issue}`);
        console.log(`     üí° ${s.suggestion}`);
      });
    });

    // Save report
    const reportPath = path.join(process.cwd(), 'performance-reports/import-optimization.json');
    fs.writeFileSync(
      reportPath,
      JSON.stringify({ timestamp: new Date().toISOString(), suggestions: this.suggestions }, null, 2)
    );

    console.log(`\n‚úÖ Report saved to: ${reportPath}`);
    console.log('\n' + '=' . repeat(60));
  }
}

// Run the optimizer
const optimizer = new ImportOptimizer();
optimizer.analyzeProject();