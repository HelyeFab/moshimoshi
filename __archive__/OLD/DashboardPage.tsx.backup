'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { useToast } from '@/components/ui/Toast/ToastContext'
import { useI18n } from '@/i18n/I18nContext'
import DoshiMascot from '@/components/ui/DoshiMascot'
import Navbar from '@/components/layout/Navbar'
import { LoadingOverlay } from '@/components/ui/Loading'
import Tooltip from '@/components/ui/Tooltip'
import LearningVillage from '@/components/dashboard/LearningVillage'
import AchievementDisplay from '@/components/dashboard/AchievementDisplay'
import StreakCounter from '@/components/layout/StreakCounter'
import AchievementToast from '@/components/notifications/AchievementToast'
import SRSProgress from '@/components/dashboard/SRSProgress'
import QueueInsights from '@/components/dashboard/QueueInsights'
import LeechManager from '@/components/dashboard/LeechManager'
import SessionStats from '@/components/dashboard/SessionStats'
import SyncStatusIndicator from '@/components/sync/SyncStatusIndicator'
import { useAchievementStore } from '@/stores/achievement-store'
import { useStreakStore } from '@/stores/streakStore'
import { loadStreakFromFirestore, subscribeToStreakFromFirestore } from '@/lib/sync/streakSync'
import PokedexCard from '@/components/pokedex/PokedexCard'
import { useSubscription } from '@/hooks/useSubscription'
import GuestModeBanner from '@/components/ui/GuestModeBanner'
import { useAuth } from '@/hooks/useAuth'

// Learning stats will be dynamic based on achievement data


export default function DashboardPage() {
  const router = useRouter()
  const { showToast } = useToast()
  const { user, loading: authLoading, isGuest, isAuthenticated } = useAuth()
  const [isFirstVisit, setIsFirstVisit] = useState(false)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [activeTab, setActiveTab] = useState<'overview' | 'progress' | 'insights'>('overview')
  const [hasCheckedFirstVisit, setHasCheckedFirstVisit] = useState(false)

  // Subscription state
  const { subscription, isPremium } = useSubscription()

  // Achievement store
  const {
    initialize: initializeAchievements,
    getTotalPoints,
    getCompletionPercentage,
    getRecentAchievements
  } = useAchievementStore()

  // Streak store
  const { currentStreak } = useStreakStore()

  // Handle auth state and redirects
  useEffect(() => {
    // Only process after auth has loaded
    if (authLoading) return

    if (isGuest) {
      // Show guest-specific welcome message
      if (!sessionStorage.getItem('guest_welcomed')) {
        showToast('Welcome! You\'re trying Moshimoshi as a guest. Sign up anytime to save your progress! üåü', 'info', 8000)
        sessionStorage.setItem('guest_welcomed', 'true')
      }
    } else if (user && !hasCheckedFirstVisit) {
      // User is authenticated
      const hasVisited = localStorage.getItem('dashboard_visited')
      if (!hasVisited) {
        setIsFirstVisit(true)
        localStorage.setItem('dashboard_visited', 'true')
        showToast('Welcome to Moshimoshi! Doshi is excited to learn with you! üéâ', 'success', 5000)
      }
      setHasCheckedFirstVisit(true)
    }
    // Remove the redirect logic - let the page render for authenticated users
  }, [authLoading, isGuest, user, showToast, hasCheckedFirstVisit])

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 60000)
    return () => clearInterval(timer)
  }, [])
  
  // Initialize achievements when user and subscription are loaded
  useEffect(() => {
    if (user?.uid && subscription !== null) {
      initializeAchievements(user.uid, isPremium)
    }
  }, [user?.uid, isPremium, subscription, initializeAchievements])

  // Initialize streak data from Firebase
  useEffect(() => {
    if (!user?.uid || subscription === null) return

    // Load initial streak data
    if (isPremium) {
      loadStreakFromFirestore()
    }

    // Don't set up subscription here - it's handled by StreakCounter component
  }, [user?.uid, isPremium, subscription])




  const { strings } = useI18n()

  console.log('[Dashboard] User object:', user)
  console.log('[Dashboard] User isAdmin:', user?.isAdmin)

  const getGreeting = () => {
    const hour = currentTime.getHours()
    if (hour < 12) return { text: strings.dashboard?.greetings?.morning?.japanese || '„Åä„ÅØ„Çà„ÅÜ', translation: strings.dashboard?.greetings?.morning?.english || 'Good morning' }
    if (hour < 18) return { text: strings.dashboard?.greetings?.afternoon?.japanese || '„Åì„Çì„Å´„Å°„ÅØ', translation: strings.dashboard?.greetings?.afternoon?.english || 'Good afternoon' }
    return { text: strings.dashboard?.greetings?.evening?.japanese || '„Åì„Çì„Å∞„Çì„ÅØ', translation: strings.dashboard?.greetings?.evening?.english || 'Good evening' }
  }

  const greeting = getGreeting()
  
  // Dynamic learning stats
  const getLearningStats = () => {
    const totalPoints = getTotalPoints() || 0
    const completionPercentage = getCompletionPercentage() || 0
    const recentAchievements = getRecentAchievements() || []
    const streakValue = currentStreak || 0

    return [
      { label: strings.dashboard?.stats?.streak?.label || 'Streak', value: streakValue.toString(), unit: strings.dashboard?.stats?.streak?.unit || 'days', color: 'from-orange-400 to-red-500' },
      { label: strings.dashboard?.stats?.xpEarned?.label || 'XP Earned', value: totalPoints.toString(), unit: strings.dashboard?.stats?.xpEarned?.unit || 'points', color: 'from-blue-400 to-purple-500' },
      { label: strings.dashboard?.stats?.progress?.label || 'Progress', value: Math.round(completionPercentage).toString(), unit: strings.dashboard?.stats?.progress?.unit || '%', color: 'from-green-400 to-teal-500' },
      { label: strings.dashboard?.stats?.achievements?.label || 'Achievements', value: recentAchievements.length.toString(), unit: strings.dashboard?.stats?.achievements?.unit || 'recent', color: 'from-pink-400 to-rose-500' },
    ]
  }
  
  const learningStats = getLearningStats()

  // Mock data for new components (will be replaced with real data from API)
  const mockSRSItems = [
    { id: '1', state: 'new' as const, interval: 0, easeFactor: 2.5, consecutiveCorrect: 0, successRate: 0, lastReviewDate: undefined, nextReviewDate: undefined },
    { id: '2', state: 'learning' as const, interval: 0.5, easeFactor: 2.3, consecutiveCorrect: 1, successRate: 0.5, lastReviewDate: new Date(), nextReviewDate: new Date() },
    { id: '3', state: 'learning' as const, interval: 0.8, easeFactor: 2.4, consecutiveCorrect: 2, successRate: 0.66, lastReviewDate: new Date(), nextReviewDate: new Date() },
    { id: '4', state: 'review' as const, interval: 3, easeFactor: 2.5, consecutiveCorrect: 3, successRate: 0.75, lastReviewDate: new Date(), nextReviewDate: new Date() },
    { id: '5', state: 'review' as const, interval: 7, easeFactor: 2.6, consecutiveCorrect: 4, successRate: 0.8, lastReviewDate: new Date(), nextReviewDate: new Date() },
    { id: '6', state: 'mastered' as const, interval: 30, easeFactor: 2.8, consecutiveCorrect: 8, successRate: 0.95, lastReviewDate: new Date(), nextReviewDate: new Date() },
    { id: '7', state: 'new' as const, interval: 0, easeFactor: 2.5, consecutiveCorrect: 0, successRate: 0, lastReviewDate: undefined, nextReviewDate: undefined },
    { id: '8', state: 'new' as const, interval: 0, easeFactor: 2.5, consecutiveCorrect: 0, successRate: 0, lastReviewDate: undefined, nextReviewDate: undefined },
  ]

  const mockQueueItems = [
    {
      id: '1',
      content: { primaryDisplay: 'Ê∞¥', contentType: 'kanji', source: 'Genki Chapter 3' },
      priority: 95,
      priorityBreakdown: { overdue: 30, leech: 35, lowSuccess: 40 },
      nextReviewDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
      successRate: 0.45,
      failureCount: 12,
      state: 'review' as const
    },
    {
      id: '2',
      content: { primaryDisplay: '„Åì„Çì„Å´„Å°„ÅØ', contentType: 'vocabulary', source: 'Genki Chapter 1' },
      priority: 80,
      priorityBreakdown: { overdue: 20, learning: 20, lowSuccess: 40 },
      nextReviewDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
      successRate: 0.55,
      failureCount: 6,
      state: 'learning' as const
    },
    {
      id: '3',
      content: { primaryDisplay: '„ÅÇ', contentType: 'kana', source: 'Hiragana Basics' },
      priority: 30,
      priorityBreakdown: { newItem: 30 },
      nextReviewDate: new Date(),
      successRate: 0,
      failureCount: 0,
      state: 'new' as const
    }
  ]

  const mockSessions = [
    {
      id: '1',
      date: new Date(Date.now() - 24 * 60 * 60 * 1000),
      duration: 1800,
      itemsReviewed: 25,
      accuracy: 0.85,
      averageResponseTime: 3.2,
      mode: 'recognition' as const,
      status: 'completed' as const
    },
    {
      id: '2',
      date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
      duration: 1200,
      itemsReviewed: 15,
      accuracy: 0.73,
      averageResponseTime: 4.1,
      mode: 'recall' as const,
      status: 'completed' as const
    }
  ]

  const mockCurrentSession = {
    id: 'current',
    startTime: new Date(Date.now() - 10 * 60 * 1000),
    itemsCompleted: 8,
    itemsTotal: 20,
    currentAccuracy: 0.875,
    averageResponseTime: 2.8,
    streak: 5
  }

  const mockLeeches = [
    {
      id: '1',
      content: { primaryDisplay: 'Ê∞¥', secondaryDisplay: 'water, „Åø„Åö', contentType: 'kanji', difficulty: 0.8 },
      failureCount: 12,
      successRate: 0.45,
      lastFailureDate: new Date(),
      firstSeenDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
      errorHistory: [
        { date: new Date(), userAnswer: 'misu', correctAnswer: 'mizu', errorType: 'typo' as const },
        { date: new Date(Date.now() - 24 * 60 * 60 * 1000), userAnswer: 'fire', correctAnswer: 'water', errorType: 'confusion' as const }
      ],
      srsData: { easeFactor: 1.3, interval: 1, consecutiveFailures: 3 }
    },
    {
      id: '2',
      content: { primaryDisplay: 'Èõ£„Åó„ÅÑ', secondaryDisplay: 'difficult, „ÇÄ„Åö„Åã„Åó„ÅÑ', contentType: 'vocabulary', difficulty: 0.9 },
      failureCount: 9,
      successRate: 0.3,
      lastFailureDate: new Date(),
      firstSeenDate: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000),
      errorHistory: [
        { date: new Date(), userAnswer: 'muzukashi', correctAnswer: 'muzukashii', errorType: 'typo' as const }
      ],
      srsData: { easeFactor: 1.4, interval: 0.5, consecutiveFailures: 2 }
    }
  ]

  if (authLoading) {
    return (
      <LoadingOverlay
        isLoading={true}
        message={strings.dashboard?.loading || "Loading your dashboard..."}
        showDoshi={true}
        fullScreen={true}
      />
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background-light via-japanese-mizu/10 to-japanese-sakura/10 dark:from-dark-900 dark:via-dark-850 dark:to-dark-800 transition-colors duration-500">
      {/* Animated background pattern */}
      <div className="fixed inset-0 opacity-5 dark:opacity-10 pointer-events-none">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ef4444' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      {/* Navbar */}
      <Navbar user={user} showUserMenu={true} />
      
      {/* Sync Status Indicator (Hidden for Guests) */}
      {!isGuest && user && <SyncStatusIndicator />}

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8 relative z-10">
        {/* Guest Mode Banner */}
        {isGuest && (
          <GuestModeBanner className="mb-6" />
        )}

        {/* Welcome Section with Doshi */}
        <div className="mb-8 bg-[#eef6fd] dark:bg-dark-800 rounded-2xl p-8 sm:p-10 shadow-lg border border-gray-200/50 dark:border-dark-700">
          <div className="flex flex-col sm:flex-row items-center sm:items-start gap-6">
            <DoshiMascot 
              size="large" 
              variant="animated"
              onClick={() => showToast('Doshi says: „Åå„Çì„Å∞„Å£„Å¶! (Good luck!)', 'success')}
              className="flex-shrink-0"
              priority={true}
            />
            
            <div className="flex-1 text-center sm:text-left">
              <div className="mb-4">
                <h1 className="text-5xl sm:text-6xl font-bold bg-gradient-to-r from-primary-500 to-primary-600 dark:from-primary-400 dark:to-primary-500 bg-clip-text text-transparent mb-2">
                  {greeting.text}
                </h1>
                <span className="text-base text-gray-500 dark:text-gray-400 font-medium">
                  ({greeting.translation})
                </span>
              </div>
              <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                {(user?.displayName || user?.email?.split('@')[0] || 'Learner').charAt(0).toUpperCase() + (user?.displayName || user?.email?.split('@')[0] || 'Learner').slice(1)} „Åï„Çì
              </h2>
              <p className="text-lg text-gray-600 dark:text-gray-400 leading-relaxed">
                {isFirstVisit
                  ? strings.dashboard?.welcome?.firstVisit || "Welcome to your Japanese learning adventure! Doshi is here to guide you."
                  : strings.dashboard?.welcome?.returning || "Ready to continue your journey? Your dedication is inspiring!"}
              </p>
            </div>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {learningStats.map((stat, index) => (
            <div
              key={stat.label}
              className="bg-soft-white/70 dark:bg-dark-800/70 backdrop-blur-sm rounded-xl p-4 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 cursor-pointer"
              style={{ animationDelay: `${index * 100}ms` }}
            >
              <div className={`text-3xl font-bold bg-gradient-to-r ${stat.color} bg-clip-text text-transparent`}>
                {stat.value}
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400">{stat.unit}</div>
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mt-1">
                {stat.label}
              </div>
            </div>
          ))}
        </div>

        {/* Pokedex Card - Shows only if Pokemon caught */}
        <div className="mb-8">
          <PokedexCard isPremium={false} />
        </div>

        {/* Learning Village - The stunning navigation system */}
        <div className="mb-8 -mx-4 sm:mx-0">
          <LearningVillage />
        </div>

        {/* Achievement Display */}
        <div className="mb-8">
          <AchievementDisplay maxItems={12} />
        </div>

        {/* Tab Navigation */}
        <div className="mb-6 flex flex-wrap gap-2 bg-soft-white/70 dark:bg-dark-800/70 backdrop-blur-sm rounded-xl p-2">
          <button
            onClick={() => setActiveTab('overview')}
            className={`px-4 py-2 rounded-lg font-medium transition-all ${
              activeTab === 'overview' 
                ? 'bg-primary-500 text-white shadow-lg' 
                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-700'
            }`}
          >
            {strings.dashboard?.tabs?.overview || 'Overview'}
          </button>
          <button
            onClick={() => setActiveTab('progress')}
            className={`px-4 py-2 rounded-lg font-medium transition-all ${
              activeTab === 'progress' 
                ? 'bg-primary-500 text-white shadow-lg' 
                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-700'
            }`}
          >
            {strings.dashboard?.tabs?.progress || 'SRS Progress'}
          </button>
          <button
            onClick={() => setActiveTab('insights')}
            className={`px-4 py-2 rounded-lg font-medium transition-all ${
              activeTab === 'insights' 
                ? 'bg-primary-500 text-white shadow-lg' 
                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-700'
            }`}
          >
            {strings.dashboard?.tabs?.insights || 'Queue & Leeches'}
          </button>
        </div>

        {/* Tab Content */}
        {activeTab === 'overview' && (
          <>
            {/* Progress Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {/* Daily Goal */}
          <div className="bg-soft-white/70 dark:bg-dark-800/70 backdrop-blur-sm rounded-xl p-6 shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-bold text-gray-900 dark:text-gray-100">{strings.dashboard?.dailyGoal?.title || 'Daily Goal'}</h3>
              <Tooltip content={strings.dashboard?.dailyGoal?.tooltip || "Complete 30 minutes of study each day"}>
                <DoshiMascot size="xsmall" />
              </Tooltip>
            </div>
            <div className="space-y-3">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600 dark:text-gray-400">{strings.dashboard?.dailyGoal?.progress || 'Progress'}</span>
                <span className="font-medium text-gray-900 dark:text-gray-100">0/30 {strings.dashboard?.dailyGoal?.minutes || 'min'}</span>
              </div>
              <div className="h-3 bg-gray-200 dark:bg-dark-700 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-gradient-to-r from-green-400 to-emerald-500 rounded-full transition-all duration-500"
                  style={{ width: '0%' }}
                />
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                {strings.dashboard?.dailyGoal?.startPractice || 'Start your daily practice to reach your goal!'}
              </p>
            </div>
          </div>

          {/* Recent Achievement */}
          <div className="bg-soft-white/70 dark:bg-dark-800/70 backdrop-blur-sm rounded-xl p-6 shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-bold text-gray-900 dark:text-gray-100">{strings.dashboard?.achievements?.latest || 'Latest Achievement'}</h3>
              <DoshiMascot size="xsmall" />
            </div>
            {(() => {
              const recentAchievements = getRecentAchievements() || []
              return recentAchievements.length > 0 ? (
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                    <span className="text-2xl">{recentAchievements[0]?.icon || 'üéØ'}</span>
                  </div>
                  <div>
                    <p className="font-medium text-gray-900 dark:text-gray-100">
                      {recentAchievements[0]?.name || strings.dashboard?.achievements?.unlocked || 'Achievement Unlocked!'}
                    </p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {recentAchievements[0]?.description || strings.dashboard?.achievements?.keepLearning || 'Keep learning to unlock more!'}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
                      +{recentAchievements[0]?.points || 0} points
                    </p>
                  </div>
                </div>
              ) : (
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-gray-300 to-gray-400 dark:from-gray-600 dark:to-gray-700 rounded-xl flex items-center justify-center shadow-lg">
                    <span className="text-2xl">üéØ</span>
                  </div>
                  <div>
                    <p className="font-medium text-gray-900 dark:text-gray-100">{strings.dashboard?.achievements?.readyToStart || 'Ready to Start!'}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{strings.dashboard?.achievements?.completeFirst || 'Complete your first lesson to earn achievements'}</p>
                    <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">{strings.dashboard?.achievements?.journeyBegins || 'Your journey begins now'}</p>
                  </div>
                </div>
              )
            })()}
          </div>
        </div>
          </>
        )}

        {/* SRS Progress Tab */}
        {activeTab === 'progress' && (
          <div className="space-y-6">
            <SRSProgress 
              items={mockSRSItems}
              showLabels={true}
            />
            
            {/* Session Statistics */}
            <SessionStats />
          </div>
        )}

        {/* Queue & Leeches Tab */}
        {activeTab === 'insights' && (
          <div className="space-y-6">
            <QueueInsights 
              items={mockQueueItems}
              showTitle={true}
              maxItems={5}
            />
            
            <div className="border-t border-gray-200 dark:border-gray-700 my-8" />
            
            <LeechManager 
              leeches={mockLeeches}
              onResetItem={(id) => showToast(`Reset item ${id} to new`, 'success')}
              onAdjustDifficulty={(id, diff) => showToast(`Adjusted difficulty for ${id}`, 'success')}
              onAddToSpecialPractice={(id) => showToast(`Added ${id} to practice list`, 'success')}
              showTitle={true}
            />
          </div>
        )}

        {/* Account Info (Redesigned) */}
        <div className="bg-soft-white/70 dark:bg-dark-800/70 backdrop-blur-sm rounded-xl p-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-bold text-gray-900 dark:text-gray-100">{strings.dashboard?.account?.title || 'Account Details'}</h3>
            <div className="flex items-center gap-2">
              {user?.tier === 'premium.monthly' || user?.tier === 'premium.yearly' ? (
                <>
                  <span className="px-3 py-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white text-xs font-bold rounded-full shadow-lg">
                    PREMIUM
                  </span>
                  <DoshiMascot size="xsmall" />
                </>
              ) : (
                <>
                  <span className="px-3 py-1 bg-gray-200 dark:bg-dark-700 text-gray-700 dark:text-gray-300 text-xs font-medium rounded-full">
                    {user?.tier === 'guest' ? 'GUEST' : 'FREE'}
                  </span>
                  <Tooltip content={strings.dashboard?.account?.upgradeTooltip || "Upgrade to Premium for unlimited lessons!"}>
                    <Link href="/pricing" className="text-primary-500 hover:text-primary-600 transition-colors">
                      <span className="text-sm">{strings.dashboard?.account?.upgrade || 'Upgrade'} ‚Üí</span>
                    </Link>
                  </Tooltip>
                </>
              )}
            </div>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-500 dark:text-gray-400">{strings.dashboard?.account?.email || 'Email'}</span>
              <p className="font-medium text-gray-900 dark:text-gray-100">{user?.email}</p>
            </div>
            <div>
              <span className="text-gray-500 dark:text-gray-400">{strings.dashboard?.account?.memberSince || 'Member Since'}</span>
              <p className="font-medium text-gray-900 dark:text-gray-100">
                {user?.metadata?.creationTime ? 
                  new Date(user.metadata.creationTime).toLocaleDateString() : 
                  strings.dashboard?.account?.recentlyJoined || 'Recently joined'}
              </p>
            </div>
            {user?.emailVerified !== undefined && (
              <div>
                <span className="text-gray-500 dark:text-gray-400">{strings.dashboard?.account?.emailStatus || 'Email Status'}</span>
                <p className={`font-medium ${user.emailVerified ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}`}>
                  {user.emailVerified ? `‚úì ${strings.dashboard?.account?.verified || 'Verified'}` : `‚ö† ${strings.dashboard?.account?.pendingVerification || 'Pending Verification'}`}
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Dev Notes (Styled) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-8 bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-xl p-4 border border-yellow-300 dark:border-yellow-700">
            <div className="flex items-start gap-3">
              <DoshiMascot size="xsmall" />
              <div>
                <p className="text-sm font-medium text-yellow-800 dark:text-yellow-300 mb-1">
                  {strings.dashboard?.devMode || 'Developer Mode'}
                </p>
                <Link 
                  href="/auth-test"
                  className="text-sm text-blue-600 dark:text-blue-400 hover:underline"
                >
                  ‚Üí Auth Test Page
                </Link>
              </div>
            </div>
          </div>
        )}
      </main>
      
      {/* Achievement Toast Notifications */}
      <AchievementToast />
    </div>
  )
}