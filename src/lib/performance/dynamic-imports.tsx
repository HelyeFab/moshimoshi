/**
 * Optimized Dynamic Imports
 * Auto-generated by optimize-imports.js
 * 
 * Use these helpers for lazy loading heavy components and libraries
 */

import dynamic from 'next/dynamic';
import { lazy, Suspense, useEffect } from 'react';

// Loading component
const LoadingComponent = () => (
  <div className="flex items-center justify-center p-4">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
  </div>
);

// Dynamic imports for heavy libraries
export const DynamicImports = {
  // Firebase
  firebase: () => import('firebase/app'),
  firebaseAuth: () => import('firebase/auth'),
  firebaseFirestore: () => import('firebase/firestore'),
  firebaseStorage: () => import('firebase/storage'),
  
  // UI Libraries - Optional, comment out if not installed
  // muiCore: () => import('@mui/material'),
  // muiIcons: () => import('@mui/icons-material'),
  
  // Charts - Optional, comment out if not installed
  // chartjs: () => import('chart.js'),
  // reactChartjs: () => import('react-chartjs-2'),
  
  // Date utilities - Optional, comment out if not installed
  // moment: () => import('moment'),
  // dateFns: () => import('date-fns'),
  
  // Utilities - Optional, comment out if not installed
  // lodash: () => import('lodash'),
};

// Lazy loaded components with loading states
// Uncomment and update imports as components are created
export const LazyComponents = {
  /* Commented out - uncomment as components are created
  // Admin components
  AdminDashboard: dynamic(() => import('@/components/admin/Dashboard'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  AdminStats: dynamic(() => import('@/components/admin/Stats'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  // Modals and Dialogs
  SettingsModal: dynamic(() => import('@/components/modals/SettingsModal'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  // Charts and visualizations
  ProgressChart: dynamic(() => import('@/components/charts/ProgressChart'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  
  // Heavy forms
  LessonForm: dynamic(() => import('@/components/forms/LessonForm'), {
    loading: () => <LoadingComponent />,
    ssr: false,
  }),
  */
};

// Helper to preload components
export const preloadComponent = (componentName: keyof typeof LazyComponents) => {
  const component = LazyComponents[componentName] as any;
  if (component && typeof component?.preload === 'function') {
    component.preload();
  }
};

// Helper to load library on demand
export const loadLibrary = async (libraryName: keyof typeof DynamicImports) => {
  const loader = DynamicImports[libraryName];
  if (loader) {
    return await loader();
  }
  throw new Error(`Library ${libraryName} not found in dynamic imports`);
};

// React lazy with error boundary
export const lazyWithErrorBoundary = (
  importFunc: () => Promise<any>,
  _fallback?: React.ComponentType
) => {
  const LazyComponent = lazy(importFunc);
  
  const WrappedComponent = (props: any) => (
    <Suspense fallback={<LoadingComponent />}>
      <LazyComponent {...props} />
    </Suspense>
  );
  
  WrappedComponent.displayName = 'LazyWithErrorBoundary';
  
  return WrappedComponent;
};

// Intersection Observer for lazy loading
export const useLazyLoad = (ref: React.RefObject<HTMLElement>, callback: () => void) => {
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          callback();
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => observer.disconnect();
  }, [ref, callback]);
};
