/**
 * Centralized Logger for Moshimoshi
 *
 * Features:
 * - Environment-aware (dev vs production)
 * - Module-based filtering
 * - Browser console controls
 * - Structured logging
 * - Performance optimized
 */

type LogLevel = 'debug' | 'info' | 'warn' | 'error'
type LogModule = 'streak' | 'pokemon' | 'auth' | 'review' | 'achievement' | 'sync' | 'kanji' | 'kana' | '*'

interface LogConfig {
  enabled: boolean
  modules: Set<LogModule>
  level: LogLevel
}

class Logger {
  private config: LogConfig
  private isDevelopment: boolean

  constructor() {
    this.isDevelopment = process.env.NODE_ENV === 'development'

    // Initialize config
    this.config = {
      enabled: this.isDevelopment,
      modules: new Set<LogModule>(),
      level: 'debug'
    }

    // Load saved preferences from localStorage (browser only)
    if (typeof window !== 'undefined') {
      this.loadConfigFromStorage()
      // Expose to window for easy browser console access
      (window as any).logger = this
    }
  }

  private loadConfigFromStorage() {
    try {
      const saved = localStorage.getItem('logger_config')
      if (saved) {
        const parsed = JSON.parse(saved)
        this.config.modules = new Set(parsed.modules || [])
        this.config.level = parsed.level || 'debug'
      }
    } catch {
      // Ignore errors, use defaults
    }
  }

  private saveConfig() {
    if (typeof window !== 'undefined') {
      localStorage.setItem('logger_config', JSON.stringify({
        modules: Array.from(this.config.modules),
        level: this.config.level
      }))
    }
  }

  private shouldLog = (module: LogModule, level: LogLevel = 'debug'): boolean => {
    // Never log in production unless it's an error
    if (!this.isDevelopment && level !== 'error') {
      return false
    }

    // Check if logging is enabled
    if (!this.config.enabled) {
      return false
    }

    // Check module filter
    const moduleEnabled = this.config.modules.has('*') || this.config.modules.has(module)

    return moduleEnabled
  }

  private formatMessage = (module: LogModule, message: string): string => {
    const emoji = {
      streak: 'üî•',
      pokemon: 'üéÆ',
      auth: 'üîê',
      review: 'üìù',
      achievement: 'üèÜ',
      sync: 'üîÑ',
      kanji: 'üàµ',
      kana: 'üî§',
      '*': 'üìã'
    }

    return `${emoji[module] || 'üìã'} [${module.toUpperCase()}] ${message}`
  }

  // Module-specific logging methods
  streak = (message: string, data?: any) => {
    if (this.shouldLog('streak')) {
      console.log(this.formatMessage('streak', message), data || '')
    }
  }

  pokemon = (message: string, data?: any) => {
    if (this.shouldLog('pokemon')) {
      console.log(this.formatMessage('pokemon', message), data || '')
    }
  }

  auth = (message: string, data?: any) => {
    if (this.shouldLog('auth')) {
      console.log(this.formatMessage('auth', message), data || '')
    }
  }

  review = (message: string, data?: any) => {
    if (this.shouldLog('review')) {
      console.log(this.formatMessage('review', message), data || '')
    }
  }

  achievement = (message: string, data?: any) => {
    if (this.shouldLog('achievement')) {
      console.log(this.formatMessage('achievement', message), data || '')
    }
  }

  sync = (message: string, data?: any) => {
    if (this.shouldLog('sync')) {
      console.log(this.formatMessage('sync', message), data || '')
    }
  }

  kanji = (message: string, data?: any) => {
    if (this.shouldLog('kanji')) {
      console.log(this.formatMessage('kanji', message), data || '')
    }
  }

  kana = (message: string, data?: any) => {
    if (this.shouldLog('kana')) {
      console.log(this.formatMessage('kana', message), data || '')
    }
  }

  // Generic methods
  debug = (module: LogModule, message: string, data?: any) => {
    if (this.shouldLog(module, 'debug')) {
      console.log(this.formatMessage(module, message), data || '')
    }
  }

  info = (module: LogModule, message: string, data?: any) => {
    if (this.shouldLog(module, 'info')) {
      console.info(this.formatMessage(module, message), data || '')
    }
  }

  warn = (module: LogModule, message: string, data?: any) => {
    if (this.shouldLog(module, 'warn')) {
      console.warn(this.formatMessage(module, message), data || '')
    }
  }

  error = (message: string, error?: any) => {
    // Always log errors
    console.error(`‚ùå [ERROR] ${message}`, error || '')

    // In production, you could send to error tracking service
    if (!this.isDevelopment && error) {
      // TODO: Send to Sentry, LogRocket, etc.
    }
  }

  // Configuration methods (useful in browser console)
  enable = (module?: LogModule) => {
    if (module) {
      this.config.modules.add(module)
      console.log(`‚úÖ Enabled logging for: ${module}`)
    } else {
      this.config.enabled = true
      console.log('‚úÖ Logging enabled')
    }
    this.saveConfig()
  }

  disable = (module?: LogModule) => {
    if (module) {
      this.config.modules.delete(module)
      console.log(`üö´ Disabled logging for: ${module}`)
    } else {
      this.config.enabled = false
      console.log('üö´ Logging disabled')
    }
    this.saveConfig()
  }

  enableAll = () => {
    this.config.enabled = true
    this.config.modules.add('*')
    this.saveConfig()
    console.log('‚úÖ All logging enabled')
  }

  disableAll = () => {
    this.config.enabled = false
    this.config.modules.clear()
    this.saveConfig()
    console.log('üö´ All logging disabled')
  }

  status = () => {
    console.log('üìä Logger Status:')
    console.log('  Enabled:', this.config.enabled)
    console.log('  Environment:', this.isDevelopment ? 'Development' : 'Production')
    console.log('  Active Modules:', Array.from(this.config.modules).join(', ') || 'None')
    console.log('  Level:', this.config.level)
    console.log('\nüìù Available commands:')
    console.log('  logger.enable("streak")  - Enable streak logging')
    console.log('  logger.enable("pokemon") - Enable pokemon logging')
    console.log('  logger.enableAll()       - Enable all logging')
    console.log('  logger.disableAll()      - Disable all logging')
    console.log('  logger.status()          - Show this status')
  }
}

// Create singleton instance
export const logger = new Logger()

// Export type for TypeScript
export type { Logger, LogModule }

/**
 * Usage Examples:
 *
 * // In your code:
 * import { logger } from '@/lib/logger'
 *
 * logger.streak('Streak updated', { current: 5, longest: 10 })
 * logger.pokemon('Pokemon caught', { id: 25, name: 'Pikachu' })
 * logger.error('Failed to save', error)
 *
 * // In browser console:
 * logger.enable('streak')        // Enable streak logs
 * logger.enable('pokemon')       // Enable pokemon logs
 * logger.enableAll()            // Enable all logs
 * logger.disableAll()           // Disable all logs
 * logger.status()               // Check current status
 */