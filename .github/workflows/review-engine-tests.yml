name: Review Engine Test Suite

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/lib/review-engine/**'
      - 'src/app/api/review/**'
      - 'src/components/review/**'
      - '__tests__/**/review*.test.{ts,tsx}'
      - 'jest.config.review-engine.js'
      - '.github/workflows/review-engine-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/lib/review-engine/**'
      - 'src/app/api/review/**'
      - 'src/components/review/**'
      - '__tests__/**/review*.test.{ts,tsx}'

jobs:
  test:
    name: Test Review Engine
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-group: [core, session, adapters]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm install -D jest-html-reporters jest-watch-typeahead fake-indexeddb
      
      - name: 🧪 Run tests - ${{ matrix.test-group }}
        run: |
          if [ "${{ matrix.test-group }}" = "core" ]; then
            npm run test:review -- --selectProjects="Agent 1: Core & Infrastructure"
          elif [ "${{ matrix.test-group }}" = "session" ]; then
            npm run test:review -- --selectProjects="Agent 2: Session & Validation"
          else
            npm run test:review -- --selectProjects="Agent 3: Adapters & API"
          fi
        env:
          CI: true
          NODE_ENV: test
      
      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '20.x'
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/review-engine/
          retention-days: 7
  
  coverage-check:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 📥 Download all coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports
      
      - name: 🔀 Merge coverage reports
        run: |
          npx nyc merge coverage-reports coverage/merged
          npx nyc report --reporter=lcov --reporter=text-summary --temp-dir=coverage/merged --report-dir=coverage/final
      
      - name: 📈 Check coverage thresholds
        run: |
          COVERAGE=$(npx nyc report --reporter=json-summary --temp-dir=coverage/merged | jq '.total.lines.pct')
          echo "Total coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage meets 80% requirement"
          fi
      
      - name: 💬 Comment PR with coverage
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: coverage
          message: |
            ## 📊 Review Engine Test Coverage
            
            | Type | Coverage | Required |
            |------|----------|----------|
            | Lines | ${{ env.LINES_COVERAGE }}% | 80% |
            | Statements | ${{ env.STATEMENTS_COVERAGE }}% | 80% |
            | Functions | ${{ env.FUNCTIONS_COVERAGE }}% | 80% |
            | Branches | ${{ env.BRANCHES_COVERAGE }}% | 80% |
            
            View full report: [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      
      - name: 📤 Upload final coverage
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          directory: ./coverage/final
          flags: review-engine
          name: review-engine-coverage
  
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: ⚡ Run performance tests
        run: |
          npm run test:review:perf || true
          echo "Performance test results:"
          cat coverage/review-engine/performance-results.json | jq '.'
      
      - name: 📊 Check performance benchmarks
        run: |
          # Check if SRS calculation is under 10ms
          SRS_TIME=$(cat coverage/review-engine/performance-results.json | jq '.srs.avgTime')
          if (( $(echo "$SRS_TIME > 10" | bc -l) )); then
            echo "⚠️ SRS calculation exceeds 10ms threshold: ${SRS_TIME}ms"
          fi
          
          # Check if validation is under 50ms
          VALIDATION_TIME=$(cat coverage/review-engine/performance-results.json | jq '.validation.avgTime')
          if (( $(echo "$VALIDATION_TIME > 50" | bc -l) )); then
            echo "⚠️ Validation exceeds 50ms threshold: ${VALIDATION_TIME}ms"
          fi
  
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 🔒 Run security audit
        run: |
          npm audit --audit-level=moderate
          npx snyk test --severity-threshold=high || true
      
      - name: 🔍 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./src/lib/review-engine
  
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🎨 Run ESLint
        run: |
          npx eslint src/lib/review-engine --ext .ts,.tsx --max-warnings 0
      
      - name: 📝 Check TypeScript
        run: |
          npx tsc --noEmit --project tsconfig.json

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, coverage-check, performance, security, lint]
    if: always()
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## Review Engine Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.coverage-check.result }}" = "success" ]; then
            echo "✅ **Coverage:** Met 80% requirement" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Coverage:** Below 80% threshold" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance.result }}" = "success" ]; then
            echo "✅ **Performance:** Within benchmarks" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Performance:** Check required" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security.result }}" = "success" ]; then
            echo "✅ **Security:** No issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security:** Review needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.lint.result }}" = "success" ]; then
            echo "✅ **Code Quality:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality:** Issues found" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 💬 Post to Slack
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: slack-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "Review Engine Test Results",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Review Engine Test Suite*\nBranch: `${{ github.ref_name }}`\nCommit: `${{ github.sha }}`"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Tests:* ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Coverage:* ${{ needs.coverage-check.result == 'success' && '✅ Met' || '❌ Below' }}"
                    }
                  ]
                }
              ]
            }